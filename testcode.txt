#include "Wire.h"

#include "U8glib.h"
//-------字体设置，大、中、小
#define setFont_L u8g.setFont(u8g_font_7x13)
#define setFont_M u8g.setFont(u8g_font_fixed_v0r)
#define setFont_S u8g.setFont(u8g_font_fixed_v0r)

#define setFont_SS u8g.setFont(u8g_font_fub25n)
/*
font:
 u8g_font_7x13
 u8g_font_fixed_v0r
 u8g_font_chikitar
 u8g_font_osb21
 u8g_font_courB14r
 u8g_font_courB24n
 u8g_font_9x18Br
 */
//屏幕类型--------
U8GLIB_SSD1306_128X64 u8g(U8G_I2C_OPT_NONE);

int ledPin = A3;//此处接无源蜂鸣器正极

int capval1,capval2,capval3,capval4,capval5,capval6,capval7,capval8;


void setup()
{
  pinMode(ledPin, OUTPUT);
  Serial.begin(9600);
  Serial.println("Touch senser");
  
}

void loop ()
{
  digitalWrite(ledPin,LOW);
  capval1 = readCapacitivePin(2); //D2管脚
  capval2 = readCapacitivePin(3);
  capval3 = readCapacitivePin(4);
  capval4 = readCapacitivePin(5);
  capval5 = readCapacitivePin(6);
  capval6 = readCapacitivePin(7);
  capval7 = readCapacitivePin(8);
  capval8 = readCapacitivePin(9); //D9管脚
  Serial.println(capval1);
  Serial.println(capval2);
   Serial.println(capval3);
   Serial.println(capval4);
Serial.println(capval5);
Serial.println(capval6);
Serial.println(capval7);
Serial.println(capval8);
  if (capval1 > 2) 
  {
  tone(ledPin, 262, 10);
    u8g.firstPage();
    do {
      drawA();
    }
    while ( u8g.nextPage() );
 
  }
  if (capval2 > 2) 
  {
  tone(ledPin, 294, 10);
  u8g.firstPage();
    do {
      drawB();
    }
    while ( u8g.nextPage() );
  }
  if (capval3 > 2)
  {
  tone(ledPin, 330, 10);
  u8g.firstPage();
    do {
      drawC();
    }
    while ( u8g.nextPage() );
  }
  if (capval4 > 2)
  {
  tone(ledPin, 350, 10);
 u8g.firstPage();
    do {
      drawD();
    }
    while ( u8g.nextPage() );
  }
  if (capval5 > 2) 
  {
  tone(ledPin, 393, 10);
  u8g.firstPage();
    do {
      drawE();
    }
    while ( u8g.nextPage() );
  }
  if (capval6 > 2) 
  {
  tone(ledPin, 441, 10);
 u8g.firstPage();
    do {
      drawF();
    }
    while ( u8g.nextPage() );
  }
  if (capval7 > 2) 
  {
   tone(ledPin, 495, 10);
  u8g.firstPage();
    do {
      drawG();
    }
    while ( u8g.nextPage() );
  }
  if (capval8 > 2) 
  {
  tone(ledPin, 525, 10);
  u8g.firstPage();
    do {
      drawH();
    }
    while ( u8g.nextPage() );
  }
}

uint8_t readCapacitivePin(int pinToMeasure) {
  // Variables used to translate from Arduino to AVR pin naming
  volatile uint8_t* port;
  volatile uint8_t* ddr;
  volatile uint8_t* pin;
  // Here we translate the input pin number from
  // Arduino pin number to the AVR PORT, PIN, DDR,
  // and which bit of those registers we care about.
  byte bitmask;
  port = portOutputRegister(digitalPinToPort(pinToMeasure));
  ddr = portModeRegister(digitalPinToPort(pinToMeasure));
  bitmask = digitalPinToBitMask(pinToMeasure);
  pin = portInputRegister(digitalPinToPort(pinToMeasure));
  // Discharge the pin first by setting it low and output
  *port &= ~(bitmask);
  *ddr |= bitmask;
  delay(1);
  // Make the pin an input with the internal pull-up on
  *ddr &= ~(bitmask);
  *port |= bitmask;

  // Now see how long the pin to get pulled up. This manual unrolling of the loop
  // decreases the number of hardware cycles between each read of the pin,
  // thus increasing sensitivity.
  uint8_t cycles = 17;
  if (*pin & bitmask) 
    cycles = 0;
  else if (*pin & bitmask) 
    cycles = 1;
  else if (*pin & bitmask) 
    cycles = 2;
  else if (*pin & bitmask) 
    cycles = 3;
  else if (*pin & bitmask) 
    cycles = 4;
  else if (*pin & bitmask) 
    cycles = 5;
  else if (*pin & bitmask) 
    cycles = 6;
  else if (*pin & bitmask) 
    cycles = 7;
  else if (*pin & bitmask) 
    cycles = 8;
  else if (*pin & bitmask) 
    cycles = 9;
  else if (*pin & bitmask) 
    cycles = 10;
  else if (*pin & bitmask) 
    cycles = 11;
  else if (*pin & bitmask) 
    cycles = 12;
  else if (*pin & bitmask) 
    cycles = 13;
  else if (*pin & bitmask) 
    cycles = 14;
  else if (*pin & bitmask) 
    cycles = 15;
  else if (*pin & bitmask) 
    cycles = 16;

  // Discharge the pin again by setting it low and output
  // It's important to leave the pins low if you want to 
  // be able to touch more than 1 sensor at a time - if
  // the sensor is left pulled high, when you touch
  // two sensors, your body will transfer the charge between
  // sensors.
  *port &= ~(bitmask);
  *ddr |= bitmask;

  return cycles;
}
void drawA()
{
  u8g.setPrintPos(4, 64);
  u8g.print("A");
  setFont_L;
}
void drawB()
{
  u8g.setPrintPos(4, 64);
  u8g.print("B");
  setFont_L;

}
void drawC()
{
  u8g.setPrintPos(4, 64);
  u8g.print("C");
  setFont_L;

}
void drawD()
{
  u8g.setPrintPos(4, 64);
  u8g.print("D");
  setFont_L;

}
void drawE()
{
  u8g.setPrintPos(4, 64);
  u8g.print("E");
  setFont_L;

}
void drawF()
{
  u8g.setPrintPos(4, 64);
  u8g.print("F");
  setFont_L;

}
void drawG()
{
  u8g.setPrintPos(4, 64);
  u8g.print("G");
  setFont_L;

}
void drawH()
{
  u8g.setPrintPos(4, 64);
  u8g.print("H");
  setFont_L;

}

